@use "variables";
@use "mixins";

#header-video {
    width: 100%;
    background: #000;

    video {
        width: 100%;
        min-height: 50vh;
        max-height: calc(100vh - 50px);
        object-fit: cover;

        // #header-video will be a few px taller than video without this
        // No idea why?
        display: flex;
    }
}

#about {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 10px 40px;
    background: linear-gradient(to bottom, variables.$pink, #fff);

    picture {
        width: 40%;
        min-width: 200px;
        max-width: min(100%, 30vh);

        img {
            width: 100%;
            border-radius: 100%;
        }
    }

    > div {
        width: 40%;
        min-width: min(100%, 350px);
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: center;        

        h1 {
            font-size: 2em;
        }
    }
}

#portfolio {

    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 30px;
    padding-top: 5vw;
    background: #fff;

    #grid {
        display: grid;
        width: min(50vw, 50vh);
        min-width: min(100%, 600px);
        max-width: 100%;
        aspect-ratio: 1 / 1;

        grid-template-columns: repeat(3, minmax(0, 1fr));
        grid-template-rows: repeat(3, minmax(0, 1fr));
        gap: 10px;

        overflow: hidden;
        margin: auto;

        img {
            object-fit: cover;
            object-position: center;
            width: 100%;
            height: 100%;
        }
    }
}

#contact {

    overflow: hidden;
    display: flex;
    justify-content: center;
    padding-top: 40px;
    padding-bottom: 40px;

    .contact-card {
        max-width: 1400px;
        min-width: min(1000px, 90%);
        display: flex;
        box-shadow: 0px 0px 11px 1px #7e7e7e78;

        $card-padding: 20px;
        $border-width: 2px;

        // Background of first half
        $colour1: variables.$pink;
        // Background of second half
        $colour2: #000;

        h2, h3 {
            margin: 0;
            text-align: center;
        }

        // Heading in left card
        h2 {
            color: $colour2;
        }

        // Heading in right card
        h3 {
            font-size: 2.34em;
            margin: 30px 0 5px;
            color: $colour1;

            &:first-child {
                margin-top: 0;
            }
        }

        i {
            margin-right: 10px;
            font-size: 70%;
        }

        a {
            color: #fff;
        }

        .contact-card-first-half, .contact-card-second-half {
            // Initially had .contact-card using `display: grid;` but Safari didn't like padding
            // on these two divs.
            // So instead use flex with flex-basis and flex-grow to ensure both halves are equal width.
            flex-basis: 0;
            flex-grow: 1;
            display: flex;
        }

        .contact-card-first-half .contact-card-first-half-inner, .contact-card-second-half .contact-card-second-half-inner {
            border: $border-width solid $colour2;
            padding: $card-padding;
            width: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .contact-card-first-half {
            padding: $card-padding 0 $card-padding $card-padding;
            background: $colour1;

            .contact-card-first-half-inner {
                border-right: none;
            }
        }

        .contact-card-second-half {
            padding: $card-padding $card-padding $card-padding 0;
            background: $colour2;

            .contact-card-second-half-inner {
                border-color: $colour1;
                border-left: none; 
            }
            
        }

        // Switch to vertical layout
        @media only screen and (max-width: 650px) {
            flex-direction: column;

            .contact-card-first-half {
                padding: $card-padding $card-padding 0;

                .contact-card-first-half-inner {
                    border-right: $border-width solid $colour2;
                    border-bottom: none;
                }
            }

            .contact-card-second-half {
                padding: 0 $card-padding $card-padding;

                .contact-card-second-half-inner {
                    border-left: $border-width solid $colour1;
                    border-top: none;
                }
            }
        }
    }
}

#testimonials {
    background: variables.$pink;
    padding-right: 0;
    padding-left: 0;

    // Left and right padding applied to each item in slideshow
    $itemHorizontalPadding: 45px;

    .swiper {

        // Needs a fixed height for slideshow to work
        height: 300px;

        --swiper-pagination-top-margin: 5px;
        --swiper-pagination-bullet-size: 8px;

        @media (hover: none) {
            // Use larger bullets on touch devices
            --swiper-pagination-top-margin: 10px;
            --swiper-pagination-bullet-size: 16px;
            --swiper-pagination-bullet-horizontal-gap: 8px;
        }

        .swiper-wrapper {
            // Need to allow for pagination bullets
            height: calc(100% - var(--swiper-pagination-top-margin) - var(--swiper-pagination-bullet-size));
        }

        .swiper-button-prev, .swiper-button-next {
            // Make arrow buttons white
            color: #fff;
        }

        // Style pagination bullets
        .swiper-pagination {
            position: static;
            margin-top: var(--swiper-pagination-top-margin);

            // Ensure height is purely just the bullets
            line-height: 0;

            .swiper-pagination-bullet-active {
                /* purgecss ignore current */
                background: #fff;
            }
        }

        .item {
            height: 100%;
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0 $itemHorizontalPadding 10px;
            gap: 40px;
            overflow: hidden;

            // Item displayed with horizontal layout on desktop

            .image {
                max-width: 40%;
                height: 100%;
                display: flex;
                justify-content: center;
                overflow: hidden;
                
                // --aspect-ratio variable gets set in style attribute
                // This makes sure div is no wider than image on Safari and Firefox
                aspect-ratio: var(--aspect-ratio);

                picture {
                    display: flex;
                    justify-self: center;
                    align-items: center;
                }
                
                img {
                    max-width: 100%;
                    max-height: 100%;
                    width: auto;
                    height: auto;
                }
            }

            .quote {
                width: 40%;
                color: #6d6d6d;

                @include mixins.testimonial-quote;
            }
        }
    }

    // For narrow screens, show item vertically with image above quote
    @media only screen and (max-width: 900px) {

        .swiper {
            height: 400px;

            .item {
                flex-direction: column;
                gap: 10px;

                /*
                    Layout is slightly complex.
                    We want text to take up whatever vertical height it needs.
                    Then display image as large as possible in remaining space.
                    However if those two combined don't take up full height, centre them vertically.

                    We achieve this by applying a small height on image that we know would always be safe,
                    and adding flex grow to it so that it expands as much as possible.
                    
                    However, depending on the aspect ratio of the image, the containing div may grow to be far
                    taller than the image. This would cause the text to be pushed to bottom of slide with
                    a large gap above it to the image. To solve this we put a max-height on the image container
                    based on its aspect ratio.
                */
                .image {
                    max-width: 100%;

                    // Max height = max width / aspect ratio
                    // --aspect-ratio variable gets set in style attribute
                    // Max width = Screen width - item left padding - item right padding
                    max-height: calc((100vw - 2 * $itemHorizontalPadding) / var(--aspect-ratio));
                    width: auto;
                    height: 20%;
                    flex-grow: 1;
                }

                .quote {
                    width: 100%;
                }
            }
        }
    }

    // Can allow a greater gap between arrow buttons and screen edge on wide devices
    @media only screen and (min-width: 1150px) {

        .swiper-button-prev {
            left: 25px;
        }

        .swiper-button-next {
            right: 25px;
        }
    }


    .testimonials-link-container {
        margin-top: 40px;
        display: flex;
        justify-content: center;
    }
}